# FOOD

type Food {
  nameId: String!
  entryId: String!
  name: String!
}

type PaginatedFoods {
  items: [Food!]
  nextToken: String
}

input CreateFoodInput {
  name: String!
}

input UpdateFoodInput {
  nameId: String!
  entryId: String!
  name: String
}

input TableFoodFilterInput {
  nameId: TableStringFilterInput
  entryId: TableStringFilterInput
  name: TableStringFilterInput
}

# INGREDIENT

type Ingredient {
  nameId: String!
  entryId: String!
  mealEntry: DiaryEntry!
  food: Food!
  quantity: Quantity!
}

type Ingredients {
  items: [Ingredient!]
}

type Quantity {
  amount: Float!
  unit: String!
}

input CreateIngredientInput {
  userId: String!
  mealEntryId: GutAiIdInput!
  foodId: GutAiIdInput!
  quantity: QuantityInput!
}

input UpdateIngredientInput {
  nameId: String!
  entryId: String!
  mealEntryId: GutAiIdInput
  foodId: GutAiIdInput
  quantity: QuantityInput
}

input TableIngredientFilterInput {
  mealEntryId: GutAiIdInput!
}

input QuantityInput {
  amount: Float!
  unit: String!
}

# MEDICINE

type Medicine {
  nameId: String!
  entryId: String!
  name: String!
}

type PaginatedMedicines {
  items: [Medicine!]
  nextToken: String
}

input CreateMedicineInput {
  name: String!
}

input UpdateMedicineInput {
  nameId: String!
  entryId: String!
  name: String
}

input TableMedicineFilterInput {
  nameId: TableStringFilterInput
  entryId: TableStringFilterInput
  name: TableStringFilterInput
}

# DOSE

type Dose {
  nameId: String!
  entryId: String!
  dosesEntry: DiaryEntry!
  medicine: Medicine!
  quantity: Quantity!
}

input CreateDoseInput {
  userId: String!
  dosesEntryId: GutAiIdInput!
  medicineId: GutAiIdInput!
  quantity: QuantityInput!
}

input UpdateDoseInput {
  nameId: String!
  entryId: String!
  dosesEntryId: GutAiIdInput
  medicineId: GutAiIdInput
  quantity: QuantityInput
}

input TableDoseFilterInput {
  dosesEntryId: GutAiIdInput!
}

# DIARY ENTRY

type DiaryEntry {
  nameId: String!
  entryId: String!
  creationDate: AWSDateTime!
  modificationDate: AWSDateTime!
  datetime: AWSDateTime!
  meal: Meal
  bowelMovement: BowelMovement
  doses: Doses
  symptom: Symptom
  notes: String
}

type PaginatedDiaryEntries {
  items: [DiaryEntry!]
  nextToken: String
}

input CreateDiaryEntryInput {
  userId: String!
  creationDate: AWSDateTime!
  modificationDate: AWSDateTime!
  datetime: AWSDateTime!
  meal: MealInput
  bowelMovement: BowelMovementInput
  doses: DosesInput
  symptom: SymptomInput
  notes: String
}

input UpdateDiaryEntryInput {
  nameId: String!
  entryId: String!
  creationDate: AWSDateTime!
  modificationDate: AWSDateTime!
  datetime: AWSDateTime!
  meal: MealInput
  bowelMovement: BowelMovementInput
  doses: DosesInput
  symptom: SymptomInput
  notes: String
}

input TableDiaryEntryFilterInput {
  datetime: TableAWSDateTimeFilterInput
}

# MEAL ENTRY

type Meal {
  ingredients: [Ingredient!]
}

input MealInput {
  ingredients: [GutAiIdInput!]
}

# BOWEL MOVEMENT ENTRY

type BowelMovement {
  type: Int!
  volume: Int!
}

input BowelMovementInput {
  type: Int!
  volume: Int!
}

# DOSES ENTRY

type Doses {
  items: [Dose!]
}

input DosesInput {
  doses: [GutAiIdInput!]
}

# SYMPTOM

type Symptom {
  symptomType: SymptomType!
  severity: Float!
}

input SymptomInput {
  symptomType: SymptomTypeInput!
  severity: Float!
}

type SymptomType {
  name: String!
}

input SymptomTypeInput {
  name: String!
}

# GENERIC

type GutAiId {
  nameId: String!
  entryId: String!
}

input GutAiIdInput {
  nameId: String!
  entryId: String!
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input TableAWSDateTimeFilterInput {
  ne: AWSDateTime
  eq: AWSDateTime
  le: AWSDateTime
  lt: AWSDateTime
  ge: AWSDateTime
  gt: AWSDateTime
  between: [AWSDateTime]
}

type Query {
  getFood(nameId: String!, entryId: String!): Food
  listFoods(
    filter: TableFoodFilterInput
    limit: Int
    nextToken: String
  ): PaginatedFoods!
  getIngredient(nameId: String!, entryId: String!): Ingredient
  listIngredients(filter: TableIngredientFilterInput): Ingredients
  getMedicine(nameId: String!, entryId: String!): Medicine
  listMedicines(
    filter: TableMedicineFilterInput
    limit: Int
    nextToken: String
  ): PaginatedMedicines!
  getDose(nameId: String!, entryId: String!): Dose
  listDoses(filter: TableDoseFilterInput): Doses
  getDiaryEntry(nameId: String!, entryId: String!): DiaryEntry
  listDiaryEntries(
    userId: String!
    filter: TableDiaryEntryFilterInput
    limit: Int
    nextToken: String
  ): PaginatedDiaryEntries!
}

type Mutation {
  createFood(input: CreateFoodInput!): Food
  updateFood(input: UpdateFoodInput!): Food
  deleteFood(input: GutAiIdInput!): Food
  createIngredient(input: CreateIngredientInput!): Ingredient
  updateIngredient(input: UpdateIngredientInput!): Ingredient
  deleteIngredient(input: GutAiIdInput!): Ingredient
  createMedicine(input: CreateMedicineInput!): Medicine
  updateMedicine(input: UpdateMedicineInput!): Medicine
  deleteMedicine(input: GutAiIdInput!): Medicine
  createDose(input: CreateDoseInput!): Dose
  updateDose(input: UpdateDoseInput!): Dose
  deleteDose(input: GutAiIdInput!): Dose
  createDiaryEntry(input: CreateDiaryEntryInput!): DiaryEntry
  updateDiaryEntry(input: UpdateDiaryEntryInput!): DiaryEntry
  deleteDiaryEntry(input: GutAiIdInput!): DiaryEntry
  deleteItem(input: GutAiIdInput!): GutAiIdInput
}

type Schema {
  query: Query
  mutation: Mutation
}
