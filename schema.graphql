# FOOD

type Food {
    nameId: String!
    entryId: String!
    name: String
}

type PaginatedFoods {
    items: [Food]
    nextToken: String
}

input CreateFoodInput {
    name: String!
}

input UpdateFoodInput {
    nameId: String!
    entryId: String!
    name: String!
}

# MEAL ENTRY

type MealEntry {
    nameId: String!
    entryId: String!
    creationDate: String
	modificationDate: String
	datetime: String!
	meal: Meal
	notes: String
}

type Meal {
	ingredients: [Ingredient!]
}

type Ingredient {
	foodId: GutAiId
	quantity: Quantity
}

type Quantity {
	amount: Float
	unit: String
}

input CreateMealEntryInput {
    creationDate: String
	modificationDate: String
	datetime: String!
	meal: MealInput
	notes: String
}

input MealInput {
	ingredients: [IngredientInput]
}

input IngredientInput {
	foodId: GutAiIdInput
	quantity: QuantityInput
}

input QuantityInput {
	amount: Float
	unit: String
}

input UpdateMealEntryInput {
    nameId: String!
    entryId: String!
    creationDate: String
	modificationDate: String
	datetime: String
	meal: MealInput
	notes: String
}

# GENERIC

type GutAiId {
	nameId: String!
	entryId: String!
}

input GutAiIdInput {
	nameId: String!
	entryId: String!
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableFoodFilterInput {
	nameId: TableStringFilterInput
	entryId: TableStringFilterInput
	name: TableStringFilterInput
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

type Query {
    getFood(nameId: String!, entryId: String!): Food
    listFoods(filter: TableFoodFilterInput, limit: Int, nextToken: String): PaginatedFoods!
    getMealEntry(nameId: String!, entryId: String!): MealEntry
}

type Mutation {
    createFood(input: CreateFoodInput!): Food
    updateFood(input: UpdateFoodInput!): Food
    deleteFood(input: GutAiIdInput!): Food
    createMealEntry(input: CreateMealEntryInput!): MealEntry
    updateMealEntry(input: UpdateMealEntryInput!): MealEntry
    deleteMealEntry(input: GutAiIdInput!): MealEntry
}

type Schema {
    query: Query
    mutation: Mutation
}
