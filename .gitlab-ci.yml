# Jobs are named [subproject][task].

# Reference: https://github.com/fezu54/flutter-gitlab-ci-example/blob/master/.gitlab-ci.yml

stages:
  - prep
  - test
  - build
  - predeploy
  - deploy

variables:
  FLUTTER_FLAVOR: development
  FIREBASE_PROJECT: develop
  FASTLANE_CHANNEL: develop

workflow:
  rules:
    - if: ($CI_MERGE_REQUEST_TITLE =~ /^WIP:/) || ($CI_MERGE_REQUEST_TITLE =~ /^Draft:/)
      when: never
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^release/
      variables:
        FIREBASE_PROJECT: release

### Server Jobs

.server-merge-request-rules:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      changes: [server/**/*]
    - if: $CI_MERGE_REQUEST_ID
      allow_failure: true
      when: manual

.server-develop-commit-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes: [server/**/*]
    - if: $CI_COMMIT_BRANCH == "develop"
      allow_failure: true
      when: manual

.server-release-commit-rules:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      changes: [server/**/*]
    - if: $CI_COMMIT_BRANCH =~ /^release/
      allow_failure: true
      when: manual

.server-cache: &server-cache
  key:
    files:
      - server/package-lock.json
  paths:
    - server/.npm-cache

.server:
  image: google/cloud-sdk:latest
  tags:
    - docker
  before_script:
    # install node
    - apt update
    - curl -sL https://deb.nodesource.com/setup_16.x | bash -
    - apt -y install nodejs unzip
    - node --version
    # move into the server directory
    - cd server
    # install the server dependencies
    - npm ci --cache .npm-cache --prefer-offline --log-level error
    - curl -fsSL https://deno.land/x/install/install.sh | sh
    - cp /root/.deno/bin/deno /usr/local/bin && rm -rf /root/.deno
  cache:
    <<: *server-cache
    policy: pull

.firebase:
  before_script:
    # add locally installed bins to the path so we can run firebase-tools
    - PATH="$(npm bin):$PATH"
    # set the firebase project for the job
    - firebase use $FIREBASE_PROJECT

.gcloud:
  before_script:
    - gcloud config set project $GCLOUD_PROJECT

server:prep:
  stage: prep
  extends:
    - .server
  script:
    # before_script will automatically update npm cache
    - echo "Updating server cache."
  rules:
    - !reference [.server-develop-commit-rules, rules]
    - !reference [.server-release-commit-rules, rules]
    - !reference [.server-merge-request-rules, rules]
  cache:
    <<: *server-cache
    policy: pull-push

server:lint:
  stage: test
  extends:
    - .server
  script:
    - npm run lint
  rules:
    - !reference [.server-develop-commit-rules, rules]
    - !reference [.server-release-commit-rules, rules]
    - !reference [.server-merge-request-rules, rules]
  dependencies:
    - server:prep
  allow_failure: true

server:test:
  stage: test
  extends:
    - .server
  before_script:
    - !reference [.server, before_script]
    - !reference [.firebase, before_script]
  script:
    - npm run test
    - cd api
    - deno test
  rules:
    - !reference [.server-develop-commit-rules, rules]
    - !reference [.server-release-commit-rules, rules]
    - !reference [.server-merge-request-rules, rules]
  dependencies:
    - server:prep

server:deploy:develop:
  stage: deploy
  extends:
    - .server
  variables:
    GCLOUD_PROJECT: gutlogic-dev
  before_script:
    - !reference [.server, before_script]
    - !reference [.gcloud, before_script]
    - !reference [.firebase, before_script]
  script:
    - npm run deploy
    - cp "$APP_ENGINE_PARAMETERS" "$(pwd)/api/src/config.json"
    - gcloud auth activate-service-account --key-file $CLOUD_RUN_CREDENTIALS
    - gcloud run deploy api --source=./api/ --region=us-central1
  rules:
    - !reference [.server-develop-commit-rules, rules]
  dependencies:
    - server:prep
  environment: develop

server:deploy:release:
  stage: deploy
  extends:
    - .server
  variables:
    GCLOUD_PROJECT: gutlogic
  before_script:
    - !reference [.server, before_script]
    - !reference [.gcloud, before_script]
    - !reference [.firebase, before_script]
  script:
    - npm run deploy
    - cp "$APP_ENGINE_PARAMETERS" "$(pwd)/api/src/config.json"
    - gcloud run deploy api --source=./api/ --region=us-cental1
  rules:
    - !reference [.server-release-commit-rules, rules]
  dependencies:
    - server:prep
  environment: release

### Client Jobs

.client-merge-request-rules:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      changes: [client/**/*]
    - if: $CI_MERGE_REQUEST_ID
      allow_failure: true
      when: manual

.client-develop-commit-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"
      changes: [client/**/*]
    - if: $CI_COMMIT_BRANCH == "develop"
      allow_failure: true
      when: manual

.client-release-commit-rules:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      changes: [client/**/*]
    - if: $CI_COMMIT_BRANCH =~ /^release/
      allow_failure: true
      when: manual

.client-cache: &client-cache
  key:
    files:
      - client/pubspec.lock
  paths:
    - client/.pub-cache
    - client/.dart_tool/package_config.json

.client:
  image: cirrusci/flutter:3.0.5
  tags:
    - docker
  before_script:
    - shopt -s expand_aliases
    # move into the client directory
    - cd client
    # configure pub to use a local cache directory
    - export PUB_CACHE=./.pub-cache
    # alias flutter to use fvm
    - if [ -x "$(command -v fvm)" ]; then
      echo "Using FVM";
      fvm install;
      alias flutter="fvm flutter";
      fi;
    # print the flutter version for logs
    - flutter --version
    # install dependencies
    - flutter pub get
  cache:
    <<: *client-cache
    policy: pull

client:prep:
  stage: prep
  extends:
    - .client
  script:
    # write the app version into the pipeline dotenv file (https://gitlab.com/gitlab-org/gitlab-runner/-/issues/6400)
    - echo "FLUTTER_APP_VERSION=$(flutter pub run bin/version)" > version.env
    # build autogenerated dart files (models, etc) for artifacts export
    - flutter pub run build_runner build --delete-conflicting-outputs
  rules:
    - !reference [.client-develop-commit-rules, rules]
    - !reference [.client-release-commit-rules, rules]
    - !reference [.client-merge-request-rules, rules]
  artifacts:
    reports:
      dotenv: client/version.env
    paths:
      - client/lib/**/*.g.dart
      - client/test/**/*.mocks.dart
      - client/bin/**/*.mocks.dart
    expire_in: 1 day
  cache:
    <<: *client-cache
    policy: pull-push

client:lint:
  stage: test
  extends:
    - .client
  script:
    - flutter analyze --fatal-warnings lib test
    # Delete generated files after analysis but before formatting. They cause the formatter to quit with an error
    # because they are formatter to 80 columns. There's no way to change the source_gen formatting, and no way to
    # exclude the generated files, so we have to delete them (see https://github.com/dart-lang/dart_style/issues/864).
    - find lib test bin -name "*.g.dart" -type f -delete
    - find lib test bin -name "*.mocks.dart" -type f -delete
    - flutter format --line-length 120 --dry-run --set-exit-if-changed lib test
  rules:
    - !reference [.client-develop-commit-rules, rules]
    - !reference [.client-release-commit-rules, rules]
    - !reference [.client-merge-request-rules, rules]
  dependencies:
    - client:prep
  allow_failure: true

client:test:
  stage: test
  extends:
    - .client
  script:
    - bash test/generate_coverage_test_file.sh
    - flutter test --coverage
    - lcov --list coverage/lcov.info
    - genhtml coverage/lcov.info -o coverage/html
  artifacts:
    paths:
      - client/coverage
    expire_in: 5 days
  rules:
    - !reference [.client-develop-commit-rules, rules]
    - !reference [.client-release-commit-rules, rules]
    - !reference [.client-merge-request-rules, rules]
  dependencies:
    - client:prep

# build:client:apk:
#   stage: build
#   extends:
#     - .client
#   script:
#     - flutter build apk --flavor $FLUTTER_FLAVOR --release --no-codesign
#   rules:
#     - *client-merge-request-rule
#     - *manual-commit-rule

client:build:ios:
  stage: build
  extends:
    - .client
  tags:
    - macos
  script:
    - pod repo update
    - flutter build ios --flavor $FLUTTER_FLAVOR --release --no-codesign
  rules:
    # TODO we only run the build job on merge requests because the deploy jobs aren't able to reuse the artifacts
    # from this job for some reason. If we can figure out how to reuse the build artifacts during deployment, this
    # job should be the only one performing builds and run with the commented rules below.
    # - !reference [.client-develop-commit-rules, rules]
    # - !reference [.client-release-commit-rules, rules]
    - !reference [.client-merge-request-rules, rules]
  dependencies:
    - client:prep

client:screenshots:
  stage: predeploy
  extends:
    - .client
  tags:
    - macos
  script:
    # generate screenshots
    - flutter pub run bin/screenshots
    # prep fastlane
    - cd ios/fastlane
    - gem install --user-install bundler
    - bundle install
    # place screenshots into frames
    - bundle exec fastlane frameit download_frames
    - bundle exec fastlane frames
    # remove screenshots without frames so they aren't uploaded to App Store
    - cd screenshots
    - find . -type f ! -name '*_framed.*' -delete
  artifacts:
    paths:
      - client/android/fastlane
      - client/ios/fastlane
    expire_in: 1 day
  rules:
    - !reference [.client-release-commit-rules, rules]
    - if: $CI_MERGE_REQUEST_ID
      allow_failure: true
      when: manual
  dependencies:
    - client:prep

.client:deploy:ios:
  stage: deploy
  extends:
    - .client
  tags:
    - macos
  script:
    # move into ios
    - cd ios
    # copy GOOGLE_APPLICATION_CREDENTIALS from environment into fastlane target
    - cp "$GOOGLE_APPLICATION_CREDENTIALS" "$(pwd)/gc_keys.json"
    # prep fastlane
    - gem install --user-install bundler
    - bundle install
    - bundle exec fastlane run increment_build_number build_number:"$CI_PIPELINE_ID"
    # build:client:ios is skipped on deploy jobs due to issue #29
    - flutter pub run flutter_launcher_icons:main
    - flutter build ios --flavor $FLUTTER_FLAVOR --release --build-number=$CI_PIPELINE_ID --no-codesign
    # execute fastlane (archives and uploads app)
    - bundle exec fastlane $FASTLANE_CHANNEL

client:deploy:develop:ios:
  extends:
    - .client:deploy:ios
  rules:
    - !reference [.client-develop-commit-rules, rules]
  dependencies:
    - client:prep
  environment: develop

client:deploy:staging:ios:
  stage: deploy
  extends:
    - .client:deploy:ios
  variables:
    FLUTTER_FLAVOR: production
    FASTLANE_CHANNEL: staging
  release:
    tag_name: "v$FLUTTER_APP_VERSION-b$CI_PIPELINE_ID"
    description: "Release v$FLUTTER_APP_VERSION-b$CI_PIPELINE_ID"
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      when: manual
  dependencies:
    - client:prep
  environment: staging

client:deploy:release:ios:
  stage: deploy
  extends:
    - .client:deploy:ios
  variables:
    FLUTTER_FLAVOR: production
    FASTLANE_CHANNEL: release
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release/
      when: manual
  dependencies:
    - client:prep
    - client:screenshots
  environment: release
