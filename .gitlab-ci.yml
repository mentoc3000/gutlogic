# Jobs are named [stage][subproject][task].

# Reference: https://github.com/fezu54/flutter-gitlab-ci-example/blob/master/.gitlab-ci.yml

stages:
  - check
  - test
  - build
  - predeploy
  - deploy

workflow:
  rules:
    - if: ($CI_MERGE_REQUEST_TITLE =~ /WIP:/) || ($CI_MERGE_REQUEST_TITLE =~ /Draft:/)
      when: never
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH == "master"
    - if: $CI_COMMIT_BRANCH == "release"

# Create a job that only runs if neither of the subdirectories have changed. This is so MRs that don't change any of
# those files will still generate a pipeline and comply with "prevent merge unless a pipeline succeeded" rule.

compliance:
  stage: check
  tags:
    - docker
  script:
    - echo "Running compliance job to enable merge requests."
  rules:
    - changes:
        - client/**/*
        - server/**/*
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: always

# Choose the pipeline channel (develop/staging/release) by commit branch and store it in PIPELINE_CHANNEL
.pipeline-channel-variable: &pipeline-channel-variable >
  if   [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "release" ] || [ "$CI_COMMIT_BRANCH" == "release" ]; then PIPELINE_CHANNEL="release";
  elif [ "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" == "master"  ] || [ "$CI_COMMIT_BRANCH" == "master"  ]; then PIPELINE_CHANNEL="staging";
  else PIPELINE_CHANNEL="develop"; fi

# Rule for manual jobs on any critical commit.
.manual-commit-rule: &manual-commit-rule
  if: ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "release")
  when: manual
  allow_failure: true

### Server Jobs

# Rule for automatic pipelines on merge requests with server changes.
.server-merge-request-rule: &server-merge-request-rule
  if: $CI_MERGE_REQUEST_ID
  changes: [ server/**/* ]

# Rule for automatic pipelines on critical commits with server changes.
.server-commit-rule: &server-commit-rule
  if: ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "release")
  changes: [ server/**/* ]

.server:
  image: node:10-alpine
  tags:
    - docker
  before_script:
    # server pipeline variables
    - *pipeline-channel-variable
    # move into the server directory
    - cd server
    # install alpine deps (ideally this would happen in a custom dockerfile)
    - apk add --quiet --no-cache openjdk8
    # install the server dependencies
    - npm ci --log-level error
    # add locally installed bins to the path so we can run firebase-tools
    - PATH="$(npm bin):$PATH"
    # configure the firebase environment
    - firebase use $PIPELINE_CHANNEL
  dependencies: [] # ignore flutter artifacts

check:server:
  stage: check
  extends:
    - .server
  script:
    - npm run lint
  rules:
    - *server-merge-request-rule
    - *server-commit-rule
    - *manual-commit-rule
  needs: []

test:server:
  stage: test
  extends:
    - .server
  script:
    - npm run test
  rules:
    - *server-merge-request-rule
    - *server-commit-rule
    - *manual-commit-rule
  needs: []

deploy:server:
  stage: deploy
  extends:
    - .server
  script:
    - firebase deploy --token $FIREBASE_TOKEN
  rules:
    - *server-commit-rule
    - *manual-commit-rule
  needs:
    - test:server

### Client Jobs

# Rule for client jobs that run on any merge request with client changes.
.client-merge-request-rule: &client-merge-request-rule
  if: $CI_MERGE_REQUEST_ID
  changes: [ client/**/* ]

# Rule for client jobs that run on critical commits with client changes.
.client-commit-rule: &client-commit-rule
  if: ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "release")
  changes: [ client/**/* ]

# Rule for client jobs that run on critical commits with client changes (except develop).
.client-deploy-rule: &client-deploy-rule
  if: ($CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "release")
  changes: [ client/**/* ]

.client:
  image: cirrusci/flutter:1.20.4
  tags:
    - docker
  before_script:
    # client pipeline variables
    - *pipeline-channel-variable
    # move into the client directory
    - cd client
    # print the flutter version for logs
    - flutter --version
    # set FLUTTER_FLAVOR based on the pipeline channel
    - if   [ "$PIPELINE_CHANNEL" == "release" ]; then FLUTTER_FLAVOR="production";
      elif [ "$PIPELINE_CHANNEL" == "staging" ]; then FLUTTER_FLAVOR="production";
      else FLUTTER_FLAVOR="development"; fi
    # install the client dependencies and generate code
    - flutter pub get
    - flutter pub run build_runner build --delete-conflicting-outputs

check:client:
  stage: check
  extends:
    - .client
  script:
    - dartanalyzer --fatal-warnings lib test
    # Delete generated files after analysis but before formatting. They cause the formatter to quit with an error
    # because they are formatter to 80 columns. There's no way to change the source_gen formatting, and no way to
    # exclude the generated files, so we have to delete them (see https://github.com/dart-lang/dart_style/issues/864).
    - find lib test -name "*.g.dart" -type f -delete
    - flutter format --line-length 120 --dry-run --set-exit-if-changed lib test
  rules:
    - *client-merge-request-rule
    - *client-commit-rule
    - *manual-commit-rule
  needs: []

test:client:
  stage: test
  extends:
    - .client
  script:
    - bash test/generate_coverage_test_file.sh
    - flutter test --coverage
    - lcov --list coverage/lcov.info
    - genhtml coverage/lcov.info -o coverage/html
  artifacts:
    paths:
      - client/coverage
    expire_in: 5 days
  rules:
    - *client-merge-request-rule
    - *client-commit-rule
    - *manual-commit-rule
  needs: []

# build:client:apk:
#   stage: build
#   extends:
#     - .client
#   script:
#     - flutter build apk --flavor $FLUTTER_FLAVOR --release --no-codesign
#   rules:
#     - *client-merge-request-rule
#     - *manual-commit-rule

build:client:ios:
  stage: build
  extends:
    - .client
  tags:
    - macos
  script:
    - flutter build ios --flavor $FLUTTER_FLAVOR --release --no-codesign
  rules:
    - *client-merge-request-rule
    - *manual-commit-rule

predeploy:client:screenshots:
  stage: predeploy
  extends:
    - .client
  tags:
    - macos
  script:
    - flutter pub run bin/screenshots
  artifacts:
    paths:
      - client/android/fastlane
      - client/ios/fastlane
    expire_in: 1 day
  rules:
    - *client-deploy-rule
    - *manual-commit-rule

predeploy:client:tag:
  stage: predeploy
  extends:
    - .client
  script:
    - FLUTTER_APP_VERSION=${flutter pub run bin/version}
  release:
    tag_name: "v$FLUTTER_APP_VERSION"
    description: "Release $FLUTTER_APP_VERSION"
  rules:
    - *client-deploy-rule
    - *manual-commit-rule

deploy:client:ios:
  stage: deploy
  extends:
    - .client
  tags:
    - macos
  script:
    # set FASTLANE_CHANNEL to the pipeline channel
    - export FASTLANE_CHANNEL=$PIPELINE_CHANNEL
    # set FLUTTER_APP_VERSION to the pubspec version
    - export FLUTTER_APP_VERSION=${flutter pub run bin/version}
    # move into ios
    - cd ios
    # copy GC_KEYS from environment into fastlane target
    - cp "$GC_KEYS" "$(pwd)/gc_keys.json"
    # prep fastlane
    - export PATH="$PATH":"$HOME/.gem/ruby/2.6.0/bin"
    - gem install --user-install bundler
    - bundle install
    - bundle exec fastlane run increment_build_number build_number:"$CI_PIPELINE_ID"
    # build:client:ios is skipped on deploy jobs due to issue #29
    - flutter pub run flutter_launcher_icons:main
    - flutter build ios --flavor $FLUTTER_FLAVOR --release --build-number=$CI_PIPELINE_ID --no-codesign
    # execute fastlane (archives and uploads app)
    - bundle exec fastlane $FASTLANE_CHANNEL
  rules:
    - *client-commit-rule
    - *manual-commit-rule
