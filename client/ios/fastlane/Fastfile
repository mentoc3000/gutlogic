default_platform :ios

# Suppress warnings about Google Cloud API limits.
ENV["GOOGLE_AUTH_SUPPRESS_CREDENTIALS_WARNINGS"] = "true"

lane :get_app_store_connect_api_key do
  
  ensure_env_vars(
    env_vars: ['APP_STORE_CONNECT_API_KEY_CONTENT']
  )
  
  app_store_connect_api_key(
    key_id: "75HNR98N37",
    issuer_id: "9fd8aa47-a866-4f2d-b5c5-90e44847c4ca",
    key_content: "#{ENV["APP_STORE_CONNECT_API_KEY_CONTENT"]}".gsub('\n', '\\n'),
    in_house: false
  )

end

desc "Match the local development certificate for the development app."
lane :certificate_develop_local do |options|

  # Default to readonly matching.
  readonly = options.fetch(:readonly, true)
  force = options.fetch(:force, false)

  match(
    api_key: get_app_store_connect_api_key,
    app_identifier: ["com.gutlogic.app.dev"],
    type: "development",
    force: force,
    readonly: readonly,
    force_for_new_devices: true
  )

end

desc "Match the staging development certificate for the development app."
lane :certificate_develop_adhoc do |options|

  # Default to readonly matching.
  readonly = options.fetch(:readonly, true)
  force = options.fetch(:force, false)

  match(
    api_key: get_app_store_connect_api_key,
    app_identifier: ["com.gutlogic.app.dev"],
    type: "adhoc",
    force: force,
    readonly: readonly,
    force_for_new_devices: true
  )

end

desc "Match the certificate for the release app."
lane :certificate_release do |options|

  # Default to readonly matching.
  readonly = options.fetch(:readonly, true)
  force = options.fetch(:force, false)

  match(
    api_key: get_app_store_connect_api_key,
    app_identifier: ["com.gutlogic.app"],
    type: "appstore",
    force: force,
    readonly: readonly
  )

end

desc "Match all of the certificates."
lane :certificates do |options|

  certificate_develop_local(options)
  certificate_develop_adhoc(options)
  certificate_release(options)

end

platform :ios do

  desc "Build the development app for distribution, signed with the staging certificate."
  lane :build_develop do

    # Build number is incremented manually by GitLab CI

    certificate_develop_adhoc()

    gym(
      workspace: "Runner.xcworkspace",
      scheme: "development",
      export_method: "ad-hoc",
      include_bitcode: true
    )

  end

  desc "Build the production app for the distribution, signed with the release certificate."
  lane :build_release do

    # Build number is incremented manually by GitLab CI

    certificate_release()

    gym(
      workspace: "Runner.xcworkspace",
      scheme: "production",
      export_method: "app-store",
      include_bitcode: true
    )

  end

  desc "Push a new develop channel build to Firebase App Distribution."
  lane :develop do

    build_develop()

    firebase_app_distribution(
      groups: "develop-testers",
      release_notes: "Gut Logic Dev"
    )

  end

  desc "Frame screenshots"
  lane :frames do

    frameit(path: './fastlane/screenshots')
  
  end

  desc "Push a new release channel build to TestFlight."
  lane :staging do

    build_release()

    testflight(
      api_key: get_app_store_connect_api_key,
      demo_account_required: true,
      distribute_external: true,
      groups: ["Family and Friends"],
      beta_app_feedback_email: "dev@gutlogic.co",
      reject_build_waiting_for_review: true,
      changelog: File.read("./metadata/what_to_test.txt")
    )

  end

  desc "Push a new release channel build to the App Store."
  lane :release do
  
    build_release()

    appstore(
      api_key: get_app_store_connect_api_key,
      force: true,
      precheck_include_in_app_purchases: false # cannot yet be performed with API key
    )

  end

end
