// Mocks generated by Mockito 5.1.0 from annotations
// in gutlogic/test/resources/pantry_service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:built_collection/built_collection.dart' as _i6;
import 'package:gutlogic/models/food_reference/food_reference.dart' as _i7;
import 'package:gutlogic/models/sensitivity/sensitivity.dart' as _i8;
import 'package:gutlogic/models/sensitivity/sensitivity_level.dart' as _i9;
import 'package:gutlogic/models/user_food_details.dart' as _i11;
import 'package:gutlogic/resources/firebase/crashlytics_service.dart' as _i2;
import 'package:gutlogic/resources/firebase/firestore_service.dart' as _i3;
import 'package:gutlogic/resources/sensitivity/sensitivity_repository.dart'
    as _i4;
import 'package:gutlogic/resources/user_food_details_repository.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCrashlyticsService_0 extends _i1.Fake
    implements _i2.CrashlyticsService {}

class _FakeFirestoreService_1 extends _i1.Fake implements _i3.FirestoreService {
}

/// A class which mocks [SensitivityRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSensitivityRepository extends _i1.Mock
    implements _i4.SensitivityRepository {
  MockSensitivityRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrashlyticsService get crashlytics =>
      (super.noSuchMethod(Invocation.getter(#crashlytics),
          returnValue: _FakeCrashlyticsService_0()) as _i2.CrashlyticsService);
  @override
  _i3.FirestoreService get firestoreService =>
      (super.noSuchMethod(Invocation.getter(#firestoreService),
          returnValue: _FakeFirestoreService_1()) as _i3.FirestoreService);
  @override
  set firestoreService(_i3.FirestoreService? _firestoreService) => super
      .noSuchMethod(Invocation.setter(#firestoreService, _firestoreService),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<_i6.BuiltMap<_i7.FoodReference, _i8.Sensitivity>> streamAll() =>
      (super.noSuchMethod(Invocation.method(#streamAll, []),
              returnValue: Stream<
                  _i6.BuiltMap<_i7.FoodReference, _i8.Sensitivity>>.empty())
          as _i5.Stream<_i6.BuiltMap<_i7.FoodReference, _i8.Sensitivity>>);
  @override
  _i5.Stream<_i8.Sensitivity?> stream(_i7.FoodReference? foodReference) =>
      (super.noSuchMethod(Invocation.method(#stream, [foodReference]),
              returnValue: Stream<_i8.Sensitivity?>.empty())
          as _i5.Stream<_i8.Sensitivity?>);
  @override
  _i5.Future<void> updateLevel(_i7.FoodReference? foodReference,
          _i9.SensitivityLevel? newSensitivityLevel) =>
      (super.noSuchMethod(
          Invocation.method(#updateLevel, [foodReference, newSensitivityLevel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}

/// A class which mocks [UserFoodDetailsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserFoodDetailsRepository extends _i1.Mock
    implements _i10.UserFoodDetailsRepository {
  MockUserFoodDetailsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CrashlyticsService get crashlytics =>
      (super.noSuchMethod(Invocation.getter(#crashlytics),
          returnValue: _FakeCrashlyticsService_0()) as _i2.CrashlyticsService);
  @override
  _i3.FirestoreService get firestoreService =>
      (super.noSuchMethod(Invocation.getter(#firestoreService),
          returnValue: _FakeFirestoreService_1()) as _i3.FirestoreService);
  @override
  set firestoreService(_i3.FirestoreService? _firestoreService) => super
      .noSuchMethod(Invocation.setter(#firestoreService, _firestoreService),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<_i6.BuiltList<_i11.UserFoodDetails>> streamAll() =>
      (super.noSuchMethod(Invocation.method(#streamAll, []),
              returnValue: Stream<_i6.BuiltList<_i11.UserFoodDetails>>.empty())
          as _i5.Stream<_i6.BuiltList<_i11.UserFoodDetails>>);
  @override
  _i5.Stream<_i6.BuiltList<_i11.UserFoodDetails>> streamQuery(String? query) =>
      (super.noSuchMethod(Invocation.method(#streamQuery, [query]),
              returnValue: Stream<_i6.BuiltList<_i11.UserFoodDetails>>.empty())
          as _i5.Stream<_i6.BuiltList<_i11.UserFoodDetails>>);
  @override
  _i5.Stream<_i11.UserFoodDetails?> stream(_i7.FoodReference? foodReference) =>
      (super.noSuchMethod(Invocation.method(#stream, [foodReference]),
              returnValue: Stream<_i11.UserFoodDetails?>.empty())
          as _i5.Stream<_i11.UserFoodDetails?>);
  @override
  _i5.Future<void> delete(_i11.UserFoodDetails? userFoodDetails) =>
      (super.noSuchMethod(Invocation.method(#delete, [userFoodDetails]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> deleteByFoodReference(_i7.FoodReference? foodReference) =>
      (super.noSuchMethod(
          Invocation.method(#deleteByFoodReference, [foodReference]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Stream<_i11.UserFoodDetails?> add(
          _i11.UserFoodDetails? userFoodDetails) =>
      (super.noSuchMethod(Invocation.method(#add, [userFoodDetails]),
              returnValue: Stream<_i11.UserFoodDetails?>.empty())
          as _i5.Stream<_i11.UserFoodDetails?>);
  @override
  _i5.Stream<_i11.UserFoodDetails?> addFood(_i7.FoodReference? foodReference) =>
      (super.noSuchMethod(Invocation.method(#addFood, [foodReference]),
              returnValue: Stream<_i11.UserFoodDetails?>.empty())
          as _i5.Stream<_i11.UserFoodDetails?>);
  @override
  _i5.Future<void> updateEntry(_i11.UserFoodDetails? userFoodDetails) =>
      (super.noSuchMethod(Invocation.method(#updateEntry, [userFoodDetails]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updateNotes(
          _i11.UserFoodDetails? userFoodDetails, String? newNotes) =>
      (super.noSuchMethod(
          Invocation.method(#updateNotes, [userFoodDetails, newNotes]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
}
